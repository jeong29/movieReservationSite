package com.spring.controller;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

// 영화관
// 예매를 관리하는 컨트롤러

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.spring.service.MovieService;
import com.spring.service.ReservationService;
import com.spring.service.vo.BookVO;
import com.spring.service.vo.MovieVO;
import com.spring.service.vo.ScheduleVO;
import com.spring.service.vo.ScreenVO;
import com.spring.service.vo.SeatVO;

@Controller
public class ReservationController {

   @Resource(name = "reservationService")
   private ReservationService reservationService;
   
   @Resource(name = "movieService")
   private MovieService movieService;

   
   // 관리자 페이지
   // 상영관 등록 폼
   @RequestMapping(value = "/screenRegForm.do")
   public String screenRegForm(Model model) {
      model.addAttribute("page", "/jsp/reservation/movie_screen_reg_form.jsp");
      return "/jsp/admin/admin_page.jsp";
   }

   //상영관 등록
   @RequestMapping(value = "/screenReg.do")
   public String screenReg(ScreenVO screenVO, SeatVO seatVO, Model model) {
      //상영관 등록
      int result = reservationService.insertScreen(screenVO);
      //좌석 등록
      SeatVO[] seat = new SeatVO[screenVO.getSeatCnt()];
      int colCnt = screenVO.getSeatColCnt();
      int col;
      String colNum;
      int row;
      for(int i = 0; i < seat.length; i++) {
         seat[i] = new SeatVO();
         seat[i].setScreenNum(screenVO.getScreenNum());
         seat[i].setPrice(seatVO.getPrice());
         seat[i].setScreenNum(reservationService.selectMaxScreenNum().getScreenNum());
         reservationService.insertSeat(seat[i]);
         seat[i].setSeatNum(reservationService.selectMaxSeatNum().getSeatNum());
         col = (i + 1) % colCnt;
         if(col == 0){
            col = colCnt;
         }
         if(col < 10) {
            colNum = "0" + col;
         }
         else {
            colNum = Integer.toString(col);
         }
         row = i / colCnt;
         seat[i].setColNum(colNum);
         if(row == 0){
        	 seat[i].setRowNum("A");
         }
         else if(row == 1){
        	 seat[i].setRowNum("B");
         }
         else if(row == 2){
        	 seat[i].setRowNum("C");
         }
         else if(row == 3){
        	 seat[i].setRowNum("D");
         }
         else if(row == 4){
        	 seat[i].setRowNum("E");
         }
         else if(row == 5){
        	 seat[i].setRowNum("F");
         }
         else if(row == 6){
        	 seat[i].setRowNum("G");
         }
         else if(row == 7){
        	 seat[i].setRowNum("H");
         }
         else if(row == 8){
        	 seat[i].setRowNum("I");
         }
         else if(row == 9){
        	 seat[i].setRowNum("J");
         }
         else if(row == 10){
        	 seat[i].setRowNum("K");
         }
         else if(row == 11){
        	 seat[i].setRowNum("L");
         }
         else if(row == 12){
        	 seat[i].setRowNum("M");
         }
         else if(row == 13){
        	 seat[i].setRowNum("N");
         }
         else if(row == 14){
        	 seat[i].setRowNum("O");
         }
         else if(row == 15){
        	 seat[i].setRowNum("P");
         }
         else if(row == 16){
        	 seat[i].setRowNum("Q");
         }
         else if(row == 17){
        	 seat[i].setRowNum("R");
         }
         else if(row == 18){
        	 seat[i].setRowNum("S");
         }
         else if(row == 19){
        	 seat[i].setRowNum("T");
         }
         else if(row == 20){
        	 seat[i].setRowNum("U");
         }
         else if(row == 21){
        	 seat[i].setRowNum("V");
         }
         else if(row == 22){
        	 seat[i].setRowNum("W");
         }
         else if(row == 23){
        	 seat[i].setRowNum("X");
         }
         else if(row == 24){
        	 seat[i].setRowNum("Y");
         }
         else if(row == 25){
        	 seat[i].setRowNum("Z");
         }
         reservationService.updateSeat(seat[i]);
      }
      model.addAttribute("result", result);
      model.addAttribute("page", "/jsp/reservation/movie_screen_reg_result.jsp");
      return "/jsp/admin/admin_page.jsp";
   }
   
   // 상영관 목록 조회
   @RequestMapping(value = "/selectScreenList.do")
   public String selectScreenList(Model model) {
      model.addAttribute("list", reservationService.selectScreenListAdmin());
      model.addAttribute("page", "/jsp/reservation/admin_screen_list.jsp");
      return "/jsp/admin/admin_page.jsp";
   }
   
   //상영 일정 등록 폼
   @RequestMapping(value = "/scheduleRegForm.do")
   public String scheduleRegForm(Model model) {
      model.addAttribute("movie", reservationService.selectMovieTitleList());
      model.addAttribute("screen", reservationService.selectScreenListAdmin());
      model.addAttribute("page", "/jsp/reservation/movie_schedule_reg_form.jsp");
      return "/jsp/admin/admin_page.jsp";
   }
   
   //상영관 일정 등록
   @RequestMapping(value = "/scheduleReg.do")
   public String scheduleReg(@RequestParam(name = "start") String start, MovieVO movieVO, ScheduleVO scheduleVO, Model model) throws ParseException {
      //start = 2020-01-10T18:20
      start = start.replace("T", " ");
      SimpleDateFormat dt = new SimpleDateFormat("yyyy-mm-dd hh:mm");
      java.util.Date date = dt.parse(start);
      Timestamp scheduleStart = new Timestamp(date.getTime()); 
      scheduleVO.setScheduleStart(scheduleStart);
      //insert schedule
      reservationService.insertSchedule(scheduleVO);
      //insert book
      int scheduleNum = reservationService.selectScheduleNum().getScheduleNum();
      SeatVO seatVO = reservationService.selectMinNMax(scheduleVO);
      int min =  seatVO.getMin();
      int max = seatVO.getMax();
      int cnt = max + 1 - min;
      BookVO[] book = new BookVO[cnt];
      for(int i = 0; i < cnt; i++) {
         book[i] = new BookVO();
         book[i].setScheduleNum(scheduleNum);
         book[i].setSeatNum(min + i);
         reservationService.insertBook(book[i]);
      }
      return "/scheduleRegForm.do";
   }

   // 상영 일정 조회
   @RequestMapping(value = "selectScheduleListAdmin.do")
   public String selectScheduleListAdmin(Model model) {
	   model.addAttribute("list", reservationService.selectScheduleListAdmin());
	   model.addAttribute("page", "/jsp/reservation/adminScheduleList.jsp");
	   return "/jsp/admin/admin_page.jsp";
   }
   
   //고객
   // 예매 버튼 클릭 시, 상영 시간표 화면
   @RequestMapping(value = "/scheduleList.do")
   public String memberJoinForm(MovieVO movieVO, Model model, HttpSession session) {
		// 영화 상세 조회
		MovieVO movie = movieService.selectMovieDetail(movieVO);
		// 영화도 세션에 넣겠습니다.
		session.setAttribute("MOVIE_INFO", movie);
		MovieVO vo = (MovieVO) session.getAttribute("MOVIE_INFO");
		// 이 영화의 상영관 별 상영시간표와 잔여 좌석
		model.addAttribute("screenList", reservationService.selcetScreenList(vo));
		model.addAttribute("page", "/jsp/reservation/scheduleList.jsp");
		return "/jsp/main.jsp";
   }

   // 시간 선택 하면, 좌석 선택 화면
   @RequestMapping(value = "/chooseSeat.do")
   public String chooseSeat(ScheduleVO scheduleVO, Model model, HttpSession session) {
      // 좌석들 조회
      model.addAttribute("seatList", reservationService.selectBookList(scheduleVO));
      // 상영관 열 조회
      model.addAttribute("colCnt", reservationService.selectSeatColCnt(scheduleVO));

      MovieVO movieVO = (MovieVO) session.getAttribute("MOVIE_INFO");
      
      model.addAttribute("movieTitle", movieVO.getMovieTitle());
      model.addAttribute("page", "/jsp/reservation/chooseSeat.jsp");
      return "/jsp/main.jsp";
   }

   // 좌석 선택 후 예매 누르면,
   // 이선좌 또는 확인창
   @ResponseBody
   @RequestMapping(value = "/isReserved.do")
   public int isReserved(@RequestParam(name = "bookNums") String bookNums) {
      int reservation = 0;
      String[] bookNum = bookNums.split(",");
      BookVO[] bookVO = new BookVO[bookNum.length];
      boolean flag = true;
      for (int i = 0; i < bookNum.length; i++) {
         bookVO[i] = new BookVO();
         bookVO[i].setBookNum(Integer.parseInt(bookNum[i]));
         if (reservationService.selectIsReserved(bookVO[i]).getIsReserved().equals("N")) {
            reservation += 1;
         } else {
            flag = false;
         }
      }
      if (flag) {
         return reservation;
      } else {
         return 0;
      }
   }

   // 확인창에서 '예'를 누르면, 결제화면으로 이동
   @RequestMapping(value = "/reservation.do")
   public String reservation(@RequestParam(name = "bookNums") String bookNums, Model model) {
      String[] bookNum = bookNums.split(",");
      BookVO[] bookVO = new BookVO[bookNum.length];
      List<BookVO> list = new ArrayList<>();
      int price = 0;
      for (int i = 0; i < bookNum.length; i++) {
         bookVO[i] = new BookVO();
         bookVO[i].setBookNum(Integer.parseInt(bookNum[i]));
         reservationService.updateBookIsReserved(bookVO[i]);
         list.add(reservationService.selectMyReservation(bookVO[i]));
         price += list.get(i).getPrice();
      }
      System.out.println(price);
      model.addAttribute("list", list);
      model.addAttribute("price", price);
      model.addAttribute("page", "/jsp/reservation/paymentScreen.jsp");
      return "/jsp/main.jsp";
   }
}